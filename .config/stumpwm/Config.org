#+TITLE: StumpWM Configuration
#+STARTUP: overview
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args :tangle init.lisp :noweb yes
#+TODO: | DISABLED
#+TODO: TODO | DONE

* Overview

  Single org file setup has worked well for my emacs configuration. I think
  configuring stumpwm the same way will also work well.

* License

  All the code I have in this file is free software. This also goes for the
  generated =init.el= file.

  #+begin_src common-lisp
    ;; Copyright 2017, Ahmet Vedat Hallac
    ;;
    ;; This program is free software: you can redistribute it and/or modify
    ;; it under the terms of the GNU General Public License as published by
    ;; the Free Software Foundation, either version 3 of the License, or
    ;; (at your option) any later version.
    ;;
    ;; This program is distributed in the hope that it will be useful,
    ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ;; GNU General Public License for more details.
    ;;
    ;; You should have received a copy of the GNU General Public License
    ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
  #+end_src


* How to Use this file

  This file contains configuration script snippets organized by different type
  of headings.

  Each snippet is an org mode source block. Each block can be edited in a
  separate buffer by pressing =C-c '= (or =M-x org-edit-special=). In order to
  add a new block, use =C-c C-, s= and add =common-lisp= as the block's
  language. Then You can edit the contents of the block as described above.

  For more information about source blocks, ou can consult the [[http://orgmode.org/manual/Working-with-source-code.html][relevant section]]
  in [[http://orgmode.org/manual/index.html][The Org Manual]].

  Using org-mode's tangle functionality fill generate ~init.lisp~ file.

** Disabling a code snippet

   When you want to disable a snippet, add ~:tangle no~ to the relevant source block.

   For example:

   #+begin_src common-lisp :tangle no
     ;;; This line will not be added to the generated configuration
   #+end_src

** Generating configuration file

   Execute =M-x org-babel-tangle=, or press =C-c C-v t= sequence to generate the
   startup files.

* Prelude

  First, pick up anything sbcl wants. I want my environments to be the same.

  This will load quicklisp, which is the most important part.

  #+begin_src common-lisp
    (load "~/.sbclrc")
  #+end_src

  For debugging swank (on port 4005) is used. Emacs has a corresponding setup. For now, I am getting rid of this. I switched to
  ~sly~, and its corresponding setup is in ~slynk~ (see below for installation).

  #+begin_src common-lisp :tangle no
    (ql:quickload :swank)
    (defcommand swank () ()
                (swank:create-server
                 :dont-close t
                 :port swank::default-server-port))

  #+end_src

  I could go to my emacs dir, and find the integrated slynk instead of using a quickload. E.g.:

  #+begin_src common-lisp :tangle no
    (let ((slynk-dir (directory #P "~/.emacs.d/elpa/sly*/slynk/")))
      (when slynk-dir
        (push (car slynk-dir) ASDF:*CENTRAL-REGISTRY*)
        (asdf:load-system :slynk)))
  #+end_src

  But I will be lazy,  and just rely on ~quicklisp~. I'll also define a command that will not keep the server around (unlike the
  ~swank~ example above).

  #+begin_src common-lisp
    (ql:quickload :slynk)
    (defcommand slynk () ()
      (slynk:create-server))
  #+end_src

  The default prefix key, ~C-t~ is mostly OK, but it is used for creating tabs
  (pressing ~C-t t~ fixes this minor issue). I am still moving all window
  manager related keys to Super meta key.

  #+begin_src common-lisp
    (set-prefix-key (kbd "s-t"))
  #+end_src

  And finally, pull in all symbols of the ~:stumpwm~ package.

  #+begin_src common-lisp
    (in-package :stumpwm)
  #+end_src
** TODO Add emacs slime/swank setup here
* Default layout and groups

  Create two frames for emacs / shell pair in Default group. Also create some groups.

  #+begin_src common-lisp
    (split-frame-in-dir (current-group) :column 500/809)
    (add-group (current-screen) "Browse" :background t)
    (add-group (current-screen) "Chat" :background t)
    (add-group (current-screen) "Code" :background t)
    (add-group (current-screen) "Temp1" :background t)
    (add-group (current-screen) "Temp2" :background t)
    (add-group (current-screen) "Temp3" :background t)
    (add-group (current-screen) "Temp4" :background t)
    (add-group (current-screen) "Temp5" :background t)
    ;;; This is my default for now
    ;;; Related to the Float-Master default, check out the fast group switch keybindings
    (switch-to-group
     (add-group (current-screen) "Float-Dump" :background t :type 'float-group))
    (add-group (current-screen) "Float-Master" :background t :type 'float-group)
    (add-group (current-screen) "Float-Browse" :background t :type 'float-group)
    (add-group (current-screen) "Float-Chat" :background t :type 'float-group)
    (add-group (current-screen) "Float-Code" :background t :type 'float-group)
    (add-group (current-screen) "Float-Temp1" :background t :type 'float-group)
    (add-group (current-screen) "Float-Temp2" :background t :type 'float-group)
    (add-group (current-screen) "Float-Temp3" :background t :type 'float-group)
    (add-group (current-screen) "Float-Temp4" :background t :type 'float-group)
    (add-group (current-screen) "Float-Temp5" :background t :type 'float-group)

  #+end_src
* Appearance

** TTF memory leak work around

   This is a work-around for [[https://github.com/stumpwm/stumpwm/issues/474#issuecomment-481885037][Issue#474]] (see the [[https://github.com/stumpwm/stumpwm/issues/474#issuecomment-481885037][relevant post]])

   #+begin_src common-lisp :tangle no
     (run-with-timer
      900 900
      (lambda ()
        (loop for font in (stumpwm::screen-fonts (current-screen))
           when (typep font 'xft:font)
           do (clrhash (xft::font-string-line-bboxes font))
             (clrhash (xft::font-string-line-alpha-maps font))
             (clrhash (xft::font-string-bboxes font))
             (clrhash (xft::font-string-alpha-maps font)))))
   #+end_src
** Pick up a fancy font

   #+begin_src common-lisp :tangle no
     (ql:quickload :clx-truetype)
     (load-module "ttf-fonts")
     (set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 16))
   #+end_src
* Mouse Focus Policy

  Just old school

  #+begin_src common-lisp
    (setf *mouse-focus-policy* :click)
  #+end_src

* DISABLED OSD handler
  CLOSED: [2020-09-29 Tue 06:29]

  This is not really a standard thing. I use pqiv solely for displaying some on
  screen display messages. So I need to float the window, and make it lose focus.

  I could not handle this with a single hook. Currently, one hook handles the
  floating, and the other handles the focus. Also, when I try to go full screen,
  there is a flicker, which I could not get rid of. I may work on it if it
  becomes too much of a hassle.

  *NOTE*: This is not working at the moment. I disabled OSD until I can solve
   its problems.

  #+begin_src common-lisp :tangle no
    (defun osd-new-window-hook (new-window)
      (when (window-matches-properties-p new-window :instance "pqiv")
        (push-event (lambda ()
                      (if (not (typep (current-group) 'float-group))
                          (float-window new-window (current-group)))
                      (push-event (lambda ()
                                    (push new-window (group-on-top-windows (current-group)))
                                    (setf (window-fullscreen new-window) t)))))))

    (defun osd-focus-window-hook (new-window old-window)
      (when (window-matches-properties-p new-window :instance "pqiv")
        (push-event (lambda ()
                      (focus-window old-window)))))

    (add-hook *new-window-hook* #'osd-new-window-hook)

    (add-hook *focus-window-hook* #'osd-focus-window-hook)
  #+end_src

* Fullscreen floats
  I use some applications only in fullscreen mode. The code below switches these windows to fullscreen as soon as they start.

  #+begin_src common-lisp
    (defvar *vh/fullscreen-rules* '( (:instance "emacs")
                                    (:class "firefox")
                                    (:instance "slack")
                                    (:instance "xterm")
                                    (:class "disable-jetbrains-idea" :type :NORMAL)))

    (defun fullscreen-new-window-hook (new-window)
      (when (and (typep (current-group) 'float-group)
                 (dolist (rule *vh/fullscreen-rules*)
                   (when (apply #'window-matches-properties-p
                                (cons new-window rule))
                     (return rule))))
        (setf (window-fullscreen new-window) t)))


    (add-hook *new-window-hook* #'fullscreen-new-window-hook)
  #+end_src
* Key bindings

** Corrections to *root-map*
   #+begin_src common-lisp
     (define-key *root-map* (kbd "c") "exec /usr/bin/uxterm")
     (define-key *root-map* (kbd "C-c") "exec /usr/bin/uxterm")

   #+end_src

** Fake keys
   These are fake cursors for my tiny motospeed

   #+begin_src common-lisp
     ;; TODO: Convert to loop, add all modifier combinations:
     ;; S, C, M, and all their permutations
     (define-key *top-map* (kbd "s-h") "meta Left")
     (define-key *top-map* (kbd "s-j") "meta Down")
     (define-key *top-map* (kbd "s-k") "meta Up")
     (define-key *top-map* (kbd "s-l") "meta Right")

     (define-key *top-map* (kbd "s-C-h") "meta C-Left")
     (define-key *top-map* (kbd "s-C-j") "meta C-Down")
     (define-key *top-map* (kbd "s-C-k") "meta C-Up")
     (define-key *top-map* (kbd "s-C-l") "meta C-Right")

     (define-key *top-map* (kbd "s-H") "meta S-Left")
     (define-key *top-map* (kbd "s-J") "meta S-Down")
     (define-key *top-map* (kbd "s-K") "meta S-Up")
     (define-key *top-map* (kbd "s-L") "meta S-Right")

     (define-key *top-map* (kbd "s-C-H") "meta C-S-Left")
     (define-key *top-map* (kbd "s-C-J") "meta C-S-Down")
     (define-key *top-map* (kbd "s-C-K") "meta C-S-Up")
     (define-key *top-map* (kbd "s-C-L") "meta C-S-Right")
   #+end_src
** Group management keys

   These keys give faster access to groups.

   I assume there are two sets of groups: a tiling group and a floating group. ~S-t g t~ switches the fast group select set between
   these two sets.

   At start, floating group is selected for fast switch keys. Float groups master is selected in [[*Default layout and groups][Default layout and groups]].

   #+begin_src common-lisp
     (define-key *top-map* (kbd "s-G") "gselect")

     (defvar *vh/active-group-type* :float)

     (defun seq (end &key (start 1))
       "Generate integer sequence ending at END, and optionally starting at START."
       (loop for i from start to end collect i))

     (defun switch-to-tiled ()
       "Convert the fast group switch map to tiled groups"
       (setf *vh/active-group-type* :tiled)
       (dolist (i (seq 9))
         (define-key *top-map* (kbd (format nil "s-~a" i)) (format nil "gselect ~a" i))
         (define-key *top-map* (kbd (format nil "s-C-~a" i)) (format nil "gmove ~a" i))))

     (defun switch-to-float ()
       "Convert the fast group switch map to tiled groups"
       (setf *vh/active-group-type* :float)
       (dolist (i (seq 9))
         (define-key *top-map* (kbd (format nil "s-~d" i)) (format nil "gselect ~d" (+ 10 i)))
         (define-key *top-map* (kbd (format nil "s-C-~d" i)) (format nil "gmove ~d" (+ 10 i)))))

     (defcommand toggle-fast-switch-set () ()
       "Changes group switch keybindings to either the tiled or the float set."
       (if (eql *vh/active-group-type* :tiled)
           (switch-to-float)
           (switch-to-tiled)))

     (switch-to-float)

     (define-key *groups-map* (kbd "t") "toggle-fast-switch-set")

     (define-key *root-map* (kbd "s-g") "gother")
   #+end_src
** Float Group Keybindings
   #+begin_src common-lisp
     (define-key *float-group-root-map* (kbd "s-t") "other")
   #+end_src
** Convenience keys

   Just some keys to speed up comnmon operations.

   #+begin_src common-lisp
     (define-key *top-map* (kbd "s-D") "exec rofi -show-icons -show drun")
     (define-key *top-map* (kbd "s-d") "exec rofi -show-icons -show run")
     (define-key *top-map* (kbd "s-W") "exec rofi -show-icons -show window")
     (define-key *top-map* (kbd "s-w") "exec rofi -show-icons -show windowcd")
     (define-key *top-map* (kbd "s-F") "fullscreen")
     (define-key *top-map* (kbd "s-Q") "delete-window")
     (define-key *top-map* (kbd "s-C-Q") "kill-window")
   #+end_src
** Session Management

   These are the functions for system shutdown, reboot, session lock, user logout, etc.

   #+begin_src common-lisp
     (defvar *vh/session-map* (make-sparse-keymap)
       "Keymap for session and power management functions")

     (define-key *top-map* (kbd "s-p") *vh/session-map*)

     (define-key *vh/session-map* (kbd "s-l") "exec loginctl lock-session")
     (define-key *vh/session-map* (kbd "s-o") "exec loginctl poweroff")
     (define-key *vh/session-map* (kbd "s-r") "exec loginctl reboot")
     (define-key *vh/session-map* (kbd "s-s") "exec loginctl suspend")
     (define-key *vh/session-map* (kbd "s-q") "quit-confirm")
   #+end_src
** User keymap

   This is the equivalent ocf ~C-c~prefix in emacs:

   #+begin_src common-lisp
     (defvar *vh/user-map* (make-sparse-keymap)
       "Keymap for odds and ends")

     (define-key *top-map* (kbd "s-c") *vh/user-map*)
   #+end_src

   First, let's add keepass autotype.

   #+begin_src common-lisp
     (define-key *vh/user-map* (kbd "s-P") "exec /usr/bin/keepass --auto-type")
   #+end_src

   And the two clipboard functions (selection to clipboard and vice versa.

   #+begin_src common-lisp
     (define-key *vh/user-map* (kbd "c") "exec xsel | xsel -i -b")
     (define-key *vh/user-map* (kbd "C") "exec xsel -b | xsel -i")
     (define-key *vh/user-map* (kbd "w") "exec xsel -b | xargs mpv")
     (define-key *vh/user-map* (kbd "l") "exec xsel -b | xargs mpv --vo=null")
   #+end_src

   Some org-mode clocking functions make life easier.

   #+begin_src common-lisp
     (defvar *vh/timer-map* (make-sparse-keymap)
       "Keymap for time logging and timers")

     (define-key *vh/user-map* (kbd "t") *vh/timer-map*)

     (define-key *vh/timer-map* (kbd "t") "exec emacsclient -n -e '(pia/org-clock-in-team)'")
     (define-key *vh/timer-map* (kbd "u") "exec emacsclient -n -e '(pia/org-clock-in-unexpected)'")
     (define-key *vh/timer-map* (kbd "g") "exec emacsclient -c -n -e '(org-clock-goto)'")
     (define-key *vh/timer-map* (kbd "l") "exec emacsclient -n -e '(my/org-clock-in-interrupted)'")
     (define-key *vh/timer-map* (kbd "o") "exec emacsclient -n -e '(org-clock-out)'")
   #+end_src
** ACPI Function Keys
   These are the hardware control keys.

   #+begin_src common-lisp
     (define-key *top-map* (kbd "XF86MonBrightnessUp") "exec light -A 5")
     (define-key *top-map* (kbd "XF86MonBrightnessDown") "exec light -U 5")
     (define-key *top-map* (kbd "XF86AudioMute") "exec pactl set-sink-mute 1 toggle")
     (define-key *top-map* (kbd "XF86AudioMicMute") "exec pactl set-source-mute 2 toggle")
     (define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec pactl set-sink-volume 1 +5%")
     (define-key *top-map* (kbd "XF86AudioLowerVolume") "exec pactl set-sink-volume 1 -5%")
   #+end_src
** Convenience functions
   #+begin_src common-lisp
     (define-key *top-map* (kbd "s-i") "time")
     (define-key *top-map* (kbd "s-:") "eval")
     (define-key *top-map* (kbd "s-;") "colon")
   #+end_src
** Frame splitting keys
   #+begin_src common-lisp
     (define-key *tile-group-root-map* (kbd "s-s") "vsplit 2/3")
     (define-key *tile-group-root-map* (kbd "s-S") "hsplit 2/3")
   #+end_src
* Fix GDK3 Mouse wheel
  I haven't really researched why, but according to [[https://github.com/stumpwm/stumpwm/wiki/FAQ][StumpWM FAQ]], the following
  environment variable is required to make the mouse wheel work in GTK3 applications.

  #+begin_src common-lisp
    (require 'sb-posix)

    (sb-posix:setenv "GDK_CORE_DEVICE_EVENTS" "1" 1)
  #+end_src
* Fix QT5 font scale factors

  #+begin_src common-lisp
    (sb-posix:setenv "QT_AUTO_SCREEN_SCALE_FACTOR" "0" 1)
  #+end_src

* Run all my scripts and helpers

  I use the ~lxsession~ program to maintain the scripts and services that I
  want. Without this, it is difficult to ensure they are all dead when I exit
  the window manager.

  ~lxsession~ also provides the xsettings daemon - which I need for configuring
  GTK3 look and feel.

  The configuration files for ~lxsession~ are at [[file:~/.config/lxsession/stumpwm][~/.config/lxsession/stumpwm]].

   #+begin_src common-lisp
    (run-prog "/usr/bin/lxsession" :args (split-string "-e stumpwm -s stumpwm" " ") :wait nil)
   #+end_src

* Some window customizations
** New window tweaks

   #+begin_src common-lisp
     (defun new-window-adjustments (new-window)
       (when (or (window-matches-properties-p new-window :instance "gitk")
                 (window-matches-properties-p new-window :instance "git-gui"))
         (setf (window-fullscreen new-window) t)))

     (add-hook *new-window-hook* #'new-window-adjustments)
   #+end_src

   I want my dialog windows to float.

   Not sure about transients. Use ~window-transient-p~ instead?

   #+begin_src common-lisp
     (defun float-dialogs-hook (win)
       (let ((grp (current-group)) )
         (when (and (not (typep grp 'float-group))
                    (or
                     (eq (window-type win) :dialog)
                     (string-match (window-res win) "pinentry-gtk-2")))
           (float-window win grp)
           (focus-window win t))))

     (add-hook *new-window-hook* #'float-dialogs-hook)
   #+end_src

* Log stumpwm

  Send all logs to [[file:~/.cache/stumpwm/log][~/.cache/stumpwm/log]].

  #+begin_src common-lisp
    (redirect-all-output "~/.cache/stumpwm/log")
  #+end_src

* Bug fixes
  There are some areas in stumpwm that get in my way. These are corrections to those areas.

** group-add-window for float group is not correct

   When moving a window between two float groups, ~to-group~ is selected automatically. This is incorrect behavior.

   Also, a fullscreen window is no longer full screen after the move. The following fix handles both issues.

   #+begin_src lisp
     (flet ((add-float-window (group window raise)
              (let ((fullscreen-p (window-fullscreen window)))
                (change-class window 'float-window)
                (float-window-align window)
                (when fullscreen-p
                  (activate-fullscreen window))
                (when raise
                  (group-focus-window group window)))))
       (defmethod group-add-window ((group float-group) window &key raise &allow-other-keys)
         (add-float-window group window raise))
       (defmethod group-add-window (group (window float-window) &key raise &allow-other-keys)
         (add-float-window group window raise)))
   #+end_src

* Utility functions
  #+begin_src common-lisp
    (defun next-head (&optional (screen (current-screen)))
      "Find the next available display head.

    If SCREEN is not provided, current screen is used."
      (let ((heads (screen-heads screen)))
        (or (nth (+ 1 (position (current-head) heads :test #'eql)) heads)
            (car heads))))

    (defun move-window-to-display-head (window to-head)
      "Move window from its current head to another one in the same group.

    TODO: Define for tiling groups"
      (when (and (typep (current-group) 'float-group)
                 (not (eql (window-head window) to-head)))
        (let* ((cur-head-x (head-x (current-head)))
               (cur-head-y (head-y (current-head)))
               (next-head-x (head-x to-head))
               (next-head-y (head-y to-head)))
          (setf (window-x window) (+ next-head-x (- (window-x window) cur-head-x ))
                (window-y window) (+ next-head-y (- (window-y window) cur-head-y)))
          (float-window-move-resize window :x (window-x window) :y (window-y window)))))

    (defun refresh-updated-window (window)
      "Redraw the window after it is moved."
      ;; TODO Find the proper method for moving the window around
      ;; Two problems:
      ;; 1. Window doesn't move
      ;; 2. Fullscreen windows need to resize when head sizes are different
      (when (typep (current-group) 'float-group)
        (update-fullscreen (current-window) 2)
        (update-fullscreen (current-window) 2)))

    (defcommand hmove () ()
      "Move window to next head."
        (move-window-to-display-head (current-window) (next-head))
        (refresh-updated-window (current-window)))

    (define-key *root-map* (kbd "s-m") "hmove")
  #+end_src
